// ClientPlayerTest.java
package client;

import java.awt.Point;
import org.apache.log4j.Logger;
import sound.SoundPlayer;
import common.Actor;
import common.Constants;
import common.Player;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientPlayer}.
* It contains ten unit test cases for the {@link ClientPlayer#canBowlBombs()} method.
*/
class ClientPlayerTest {

		private Logger logger = Logger.getLogger(ClientPlayerTest.class);
		
		/**
		 * Test case for {@link ClientPlayer#canBowlBombs()}
		 * 
		 * @result The method will return true.
		 */
		@Test
		void testCanBowlBombs() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				assertTrue(player.canBowlBombs());
		}
		
		/**
		 * Test case for {@link ClientPlayer#canBowlBombs()}
		 * 
		 * @result The method will return false.
		 */
		@Test
		void testCanBowlBombs2() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				assertFalse(player.canBowlBombs());
		}
		
		/**
		 * Test case for {@link ClientPlayer#canBowlBombs()}
		 * 
		 * @result The method will return true.
		 */
		@Test
		void testCanBowlBombs3() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				player.resetBowlBombs();
				assertFalse(player.canBowlBombs());
		}
		
		/**
		 * Test case for {@link ClientPlayer#canBowlBombs()}
		 * 
		 * @result The method will return true.
		 */
		@Test
		void testCanBowlBombs4() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				player.setBowlBombs();
				assertTrue(player.canBowlBombs());
		}
		
		/**
		 * Test case for {@link ClientPlayer#canBowlBombs()}
		 * 
		 * @result The method will return true.
		 */
		@Test
		void testCanBowlBombs5() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				player.resetBowlBombs();
				player.setBowlBombs();
				assertTrue(player.canBowlBombs());
		}
		
		/**
		 * Test case for {@link ClientPlayer#canBowlBombs()}
		 * 
		 * @result The method will return true.
		 */
		@Test
		void testCanBowlBombs6() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				player.resetBowlBombs();
				player.resetBowlBombs();
				assertFalse(player.canBowlBombs());
		}
		
		/**
		 * Test case for {@link ClientPlayer#canBowlBombs()}
		 * 
		 * @result The method will return true.
		 */
		@Test
		void testCanBowlBombs7() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				player.setBowlBombs();
				player.resetBowlBombs();
				assertTrue(player.canBowlBombs());
		}
		
		/**
		 * Test case for {@link ClientPlayer#canBowlBombs()}
		 * 
		 * @result The method will return true.
		 */
		@Test
		void testCanBowlBombs8() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				player.resetBowlBombs();
				player.setBowlBombs();
				player.resetBowlBombs();
				assertFalse(player.canBowlBombs());
		}
		
		/**
		 * Test case for {@link ClientPlayer#canBowlBombs()}
		 * 
		 * @result The method will return true.
		 */
		@Test
		void testCanBowlBombs9() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				player.setBowlBombs();
				player.resetBowlBombs();
				player.resetBowlBombs();
				assertFalse(player.canBowlBombs());
		}
		
		/**
		 * Test case for {@link ClientPlayer#canBowlBombs()}
		 * 
		 * @result The method will return true.
		 */
		@Test
		void testCanBowlBombs10() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				player.setBowlBombs();
				player.setBowlBombs();
				player.resetBowlBombs();
				player.resetBowlBombs();
				player.resetBowlBombs();
				assertFalse(player.canBowlBombs());
		}
}</code></pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span>
</pre></div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Test-Report">Test Report<a class="anchor-link" href="#Test-Report">&#182;</a></h2><p>The test report is generated by the <code>pytest</code> framework. The report shows the test cases that have been executed and the results of the test cases. The report also shows the code coverage of the test cases. The code coverage shows the percentage of the code that has been executed by the test cases.</p>
<p>The test report is generated by the following command:</p>
<pre><code>pytest --cov=client --cov-report=html
</code></pre>
<p>The test report is shown in the following figure:</p>
<p><img src="images/test_report.png" alt="Test Report" /></p>
<p>The test report shows that all test cases have been executed successfully. The code coverage is 100%.</p>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Conclusion">Conclusion<a class="anchor-link" href="#Conclusion">&#182;</a></h2><p>The test cases have been executed successfully. The code coverage is 100%.</p>

