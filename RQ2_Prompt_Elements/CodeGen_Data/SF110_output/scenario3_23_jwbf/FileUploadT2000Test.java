// FileUploadTest.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUpload}.
* It contains one unit test case for the {@link FileUpload#hasMoreMessages()} method.
*/
class FileUploadTest {

    /**
    * Test the behavior of {@link FileUpload#hasMoreMessages()} for a specific MediaWiki version
    * @throws VersionException Thrown when encountering a wrong version of MediaWiki
    * @throws FileNotFoundException Thrown when accessing the MediaWiki file that was just generated by a version checking
    * @throws PostException Thrown in case the MediaWiki file cannot be read
    * @throws ProcessException Thrown in case any other unhandled process causes the exception
    */
    @Test
    void hasMore_version() throws VersionException, FileNotFoundException, ProcessException, VersionException {
				
        Version version = getVersion("5.11");
        if (!version.isValid()) throw new VersionException("Valid version "+version+" not found.", version);

        String action = null;
        String format = null;
        
        switch(version) {
            case MW1_11:
                action = "fileupload.edit";
                format = SimpleFile.Type.FILE_BASIC;
				break;
			case MW1_12:
				action = "fileupload.edit";
				format = SimpleFile.Type.FILE_MEDIUM;
				break;
			case MW1_13:
				action = "fileupload.edit";
				format = SimpleFile.Type.FILE_LARGE;
				break;
			case MW1_14:
				action = "fileupload.edit";
				format = SimpleFile.Type.FILE_FULLWITE;
				break;
			case MW1_15:
				action = "fileupload.edit";
				format = SimpleFile.Type.FILE_FULLWITE_FULLWITE;
				break;
			case MW1_16:
				action = "fileupload.edit";
				format = SimpleFile.Type.FILE_FULLWITE_FULLWITE;
				break;
			default:
				throw new VersionException("Valid version "+version+" not found.", version);
			}

        // Create test bot on MediaWiki
        MediaWiki bot = getBotWithApi(action, version);

        // Create local file
        String localFile = "fileupload.local";
        FileUpload.FileUploadTest.createLocalFile(bot, localFile);

        // Run test case and log whether there were no messages or messages containing 'test'
        assertTrue(FileUpload.hasMoreMessages(bot, format, localFile));
    }

    /**
    * Create test bot on MediaWiki
	 * @param bot Bot to add
    * @param format MediaWiki file type
    */
    private static MediaWiki getBotWithApi(
        String action,
        Version version
        ) {

    	try {
    		return new MediaWiki(getVersion(version).getBot(), action).load();
    	} catch(ActionException e){
    		throw new ActionException("Action '"+action+"' is not applicable to MediaWiki "+version+" format", e);
    	} catch(VersionException e){
    		throw new ActionException("Actuator is not applicable to MediaWiki "+version+" format", e);
    	} catch(ProcessException e){
    		throw new ActionException("An error occurred while creating MediaWiki "+version+" format", e);
    	}
    }

    /** Extract name of file that was uploaded from MediaWiki */
    private static String extractFileNameFromLocalFile(
        SimpleFile localFile
        ) throws FileNotFoundException {

    	String filename = localFile.getFilename();
    	if (filename.endsWith(".txt") || filename.endsWith(".txt.gz")) {
    		filename = filename