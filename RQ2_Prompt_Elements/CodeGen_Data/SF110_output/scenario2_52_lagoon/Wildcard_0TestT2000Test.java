// Wildcard_0Test.java
package nu.staldal.lagoon.util;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Wildcard}.
* It contains one unit test case for the {@link Wildcard#isWildcard(String)} method.
*/
class Wildcard_0Test {
/**
	 * @param wildcard the case which may be true or false
	 */
    private final String wildcard(boolean wildcard) {
	String value;
	if (wildcard) {
	    value="*";
	} else {
	    value="";
	}
	return value;
    }

	/**
	 * {@link Wildcard_0Test} tests the {@link Wildcard#isWildcard(String)} method.
	 */
//	@Test
//	public void testTrue () {
//	    String value;
//	    Wildcard wildcard = new Wildcard();
//	    assertFalse(wildcard.isWildcard(""));
//	    value = wildcard.getClass().getName();
//	}

	/**
	 * {@link Wildcard_0Test} tests the {@link Wildcard#getClass()} method.
	 */
//	@Test
//	public void testGetClass () {
//	    assertTrue(Wildcard.class.getName().equals(Wildcard.getClass().getName()));
//	}

	/**
	 * {@link Wildcard_0Test} tests the {@link Wildcard#isWildcard(String)} method.
	 */
//	@Test
//    @TestForInt(value = "org.junit.jupiter.api.TestForInt.getMethod")
//    void testIsWildcard () {
//	    Wildcard wildcard = new Wildcard();
//	    String value = wildcard.isWildcard("");
//	    assertNull(value);
//	}
//
//	@Test
//    @TestForInt(value = "org.junit.jupiter.api.TestForInt.getMethod", min = 0)
//    void testIsWildcard_withZero () {
//	    Wildcard wildcard = new Wildcard();
//	    String value = wildcard.isWildcard("");
//	    String valueBefore = value;
//	    String valueAfter = wildcard.getClass().getName();
//	    assertEquals(valueBefore + ".getClass() == " + valueAfter, false); // The class should not equal to the class of the wildcard.
//	}
	@Test
//	public void testWildcardWithWildcard () {
//	    String value;
//	    Wildcard wildcard = new Wildcard();
//	    do {
//		String value = wildcard.isWildcard("?^*");
//		assertEquals("The string " + wildcard + " should be wildcard", wildcardWithWildcard, value);
//		value = wildcard.isWildcard("?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.??.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?\\.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.\\.|");
//	    String value2 = wildcard.isWildcard("?^*");
//	    assertEquals("\"?^*\" should be wildcard", wildcardWithWildcard, value2);
//	    assertEquals("\"?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.\\.", value);
//	    String value3 = wildcard.isWildcard("?.?.?.*.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?\\.');
//	    String value4 = wildcard.isWildcard("?.?.?.?.*?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?\\.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?????????.');

	} while (false);
//	if (true) assertNull("The wildcard string " + wildcard + " was not null", value);

	}

	public static String wildcardWithWildcard(String value) {
	    String value2 = replaceByWildcard(new StringBuilder("?").append(value).toString(), "\r");
	    return replaceByWildcard(value2, "\r");
    }
}