// BinaryCalculate.java
package ipac;

import java.util.Arrays;

public class BinaryCalculate {

    /**
     * Calculates the sum of two binary numbers.
     *
     * @param num1 The starting binary number
     * @param num2 The binary number to be added to the starting binary
     * @return The sum of two binary numbers.
     */
    public String addBinary(String num1, String num2) {
        int maxLength = Math.max(num1.length(), num2.length());
        int[] num1Arr = new int[maxLength];
        int[] num2Arr = new int[maxLength];
        int[] resultArr = new int[maxLength];
        Arrays.fill(num1Arr, 0);
        Arrays.fill(num2Arr, 0);
        Arrays.fill(resultArr, 0);

        for (int i = 0; i < num1.length(); i++) {
            num1Arr[maxLength - num1.length() + i] = num1.charAt(i) - '0';
        }

        for (int i = 0; i < num2.length(); i++) {
            num2Arr[maxLength - num2.length() + i] = num2.charAt(i) - '0';
        }

        int carry = 0;
        for (int i = maxLength - 1; i >= 0; i--) {
            int sum = num1Arr[i] + num2Arr[i] + carry;
            resultArr[i] = sum % 2;
            carry = sum / 2;
        }

        StringBuilder result = new StringBuilder();
        if (carry != 0) {
            result.append(carry);
        }
        for (int i = 0; i < maxLength; i++) {
            result.append(resultArr[i]);
        }

        return result.toString();
    }
}

// BinaryCalculateTest.java
package ipac;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Test class of {@link BinaryCalculate}.
 * It contains ten unit test cases for the {@link BinaryCalculate#addBinary(String, String)} method.
 */
class BinaryCalculateTest {

    @Test
    void testAddBinary() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        assertEquals("0", binaryCalculate.addBinary("0", "0"));
        assertEquals("1", binaryCalculate.addBinary("0", "1"));
        assertEquals("1", binaryCalculate.addBinary("1", "0"));
        assertEquals("10", binaryCalculate.addBinary("1", "1"));
        assertEquals("11", binaryCalculate.addBinary("10", "1"));
        assertEquals("101", binaryCalculate.addBinary("100", "1"));
        assertEquals("110", binaryCalculate.addBinary("11", "11"));
        assertEquals("111", binaryCalculate.addBinary("101", "10"));
        assertEquals("1000", binaryCalculate.addBinary("111", "1"));
        assertEquals